// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name EdfaPaymentGateway
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import Foundation
import PassKit
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public struct EdfaPgExactError : Swift.Error {
  public let code: Swift.Int
  public let message: Swift.String
}
extension EdfaPaymentGateway.EdfaPgExactError : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class EdfaPgGetTransactionStatusAdapter : EdfaPaymentGateway.EdfaPgBaseAdapter<EdfaPaymentGateway.EdfaPgGetTransactionStatusService> {
  @discardableResult
  final public func execute(transactionId: Swift.String, payerEmail: Swift.String, cardNumber: Swift.String, callback: @escaping EdfaPaymentGateway.EdfaPgGetTransactionStatusCallback) -> Foundation.URLSessionDataTask
  @discardableResult
  final public func execute(transactionId: Swift.String, hash: Swift.String, callback: @escaping EdfaPaymentGateway.EdfaPgGetTransactionStatusCallback) -> Foundation.URLSessionDataTask
  @objc deinit
}
public struct EdfaPgSaleSuccess : EdfaPaymentGateway.DetailsEdfaPgResultProtocol {
  public let action: EdfaPaymentGateway.EdfaPgAction
  public let result: EdfaPaymentGateway.EdfaPgResult
  public let status: EdfaPaymentGateway.EdfaPgStatus
  public let orderId: Swift.String
  public let transactionId: Swift.String
  public let transactionDate: Foundation.Date
  public let descriptor: Swift.String?
  public let orderAmount: Swift.Double
  public let orderCurrency: Swift.String
}
extension EdfaPaymentGateway.EdfaPgSaleSuccess : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum EdfaPgStatus : Swift.String, Swift.Codable {
  case secure3D
  case redirect
  case pending
  case settled
  case reversal
  case refund
  case chargeback
  case declined
  case undefined
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TextFieldStartInputController : ObjectiveC.NSObject, UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) open var formatter: (any EdfaPaymentGateway.CaretPositioner & EdfaPaymentGateway.TextInputFormatter)?
  @_Concurrency.MainActor(unsafe) @objc open func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
public protocol OrderEdfaPgResultProtocol : EdfaPaymentGateway.EdfaPgResultProtocol {
  var orderAmount: Swift.Double { get }
  var orderCurrency: Swift.String { get }
}
public protocol TextUnformatter {
  func unformat(_ formattedText: Swift.String?) -> Swift.String?
}
public struct EdfaPgCredential {
  public let clientKey: Swift.String
  public let clientPass: Swift.String
  public let paymentUrl: Swift.String
  public init(clientKey: Swift.String, clientPass: Swift.String, paymentUrl: Swift.String)
}
public protocol TextFormatter {
  func format(_ unformattedText: Swift.String?) -> Swift.String?
}
public typealias EdfaPgSaleCallback = EdfaPaymentGateway.EdfaPgCallback<EdfaPaymentGateway.EdfaPgSaleResult>
public enum EdfaPgSaleResult : Swift.Decodable {
  case success(EdfaPaymentGateway.EdfaPgSaleSuccess)
  case decline(EdfaPaymentGateway.EdfaPgSaleDecline)
  case recurring(EdfaPaymentGateway.EdfaPgSaleRecurring)
  case secure3d(EdfaPaymentGateway.EdfaPgSale3ds)
  case redirect(EdfaPaymentGateway.EdfaPgSaleRedirect)
  public var result: any EdfaPaymentGateway.DetailsEdfaPgResultProtocol {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct EdfaPgRecurringSaleService {
}
extension EdfaPaymentGateway.EdfaPgRecurringSaleService : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class EdfaPgDataRequest {
  @objc deinit
}
public struct EdfaPgDataResponse {
  public let data: Foundation.Data?
  public let response: Foundation.URLResponse?
  public let error: (any Swift.Error)?
}
public typealias EdfaPgGetTransactionStatusCallback = EdfaPaymentGateway.EdfaPgCallback<EdfaPaymentGateway.EdfaPgGetTransactionStatusResult>
public enum EdfaPgGetTransactionStatusResult : Swift.Decodable {
  case success(EdfaPaymentGateway.EdfaPgGetTransactionStatusSuccess)
  public var result: any EdfaPaymentGateway.EdfaPgResultProtocol {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
final public class EdfaPgSaleOptions {
  final public var channelId: Swift.String?
  final public var recurringInit: Swift.Bool?
  public init(channelId: Swift.String?, recurringInit: Swift.Bool?)
  @objc deinit
}
public typealias TransactionCallback = ((EdfaPaymentGateway.EdfaPgResponse<EdfaPaymentGateway.EdfaPgSaleResult>?, Any?) -> Swift.Void)
public typealias ErrorCallback = (([Swift.String]) -> Swift.Void)
public class ExpressCardPay {
  public init()
  public class func viewController(target: UIKit.UIViewController, payer: EdfaPaymentGateway.EdfaPgPayer, order: EdfaPaymentGateway.EdfaPgSaleOrder, transactionSuccess: @escaping EdfaPaymentGateway.TransactionCallback, transactionFailure: @escaping EdfaPaymentGateway.TransactionCallback, onError: @escaping EdfaPaymentGateway.ErrorCallback, onPresent: (() -> Swift.Void)?) -> UIKit.UIViewController
  @objc deinit
}
extension EdfaPaymentGateway.ExpressCardPay {
  public func initialize(target: UIKit.UIViewController, onError: @escaping EdfaPaymentGateway.ErrorCallback, onPresent: (() -> Swift.Void)?) -> UIKit.UIViewController
  public func on(transactionSuccess: @escaping EdfaPaymentGateway.TransactionCallback) -> EdfaPaymentGateway.ExpressCardPay
  public func on(transactionFailure: @escaping EdfaPaymentGateway.TransactionCallback) -> EdfaPaymentGateway.ExpressCardPay
  public func set(payer: EdfaPaymentGateway.EdfaPgPayer) -> EdfaPaymentGateway.ExpressCardPay
  public func set(order: EdfaPaymentGateway.EdfaPgSaleOrder) -> EdfaPaymentGateway.ExpressCardPay
}
public func getPublicIP(url: Swift.String, completion: @escaping (Swift.String?, (any Swift.Error)?) -> Swift.Void)
public func EdfaPgPublicIP(completion: @escaping (Swift.String?, (any Swift.Error)?) -> Swift.Void)
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class EdfaPgGetTransactionDetailsAdapter : EdfaPaymentGateway.EdfaPgBaseAdapter<EdfaPaymentGateway.EdfaPgGetTransactionDetailsService> {
  @discardableResult
  final public func execute(transactionId: Swift.String, payerEmail: Swift.String, cardNumber: Swift.String, callback: @escaping EdfaPaymentGateway.EdfaPgGetTransactionDetailsCallback) -> Foundation.URLSessionDataTask
  @discardableResult
  final public func execute(transactionId: Swift.String, hash: Swift.String, callback: @escaping EdfaPaymentGateway.EdfaPgGetTransactionDetailsCallback) -> Foundation.URLSessionDataTask
  @objc deinit
}
public struct EdfaPgSaleRedirectBody {
  public let body: Swift.String?
}
extension EdfaPaymentGateway.EdfaPgSaleRedirectBody : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct EdfaPgTransaction {
  public let date: Foundation.Date
  public let type: EdfaPaymentGateway.EdfaPgTransactionType
  public let status: EdfaPaymentGateway.EdfaPgTransactionStatus
  public let amount: Swift.Double
}
extension EdfaPaymentGateway.EdfaPgTransaction : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct EdfaPgSaleDecline : EdfaPaymentGateway.DetailsEdfaPgResultProtocol {
  public let transactionDate: Foundation.Date
  public let descriptor: Swift.String?
  public let orderAmount: Swift.Double
  public let orderCurrency: Swift.String
  public let action: EdfaPaymentGateway.EdfaPgAction
  public let result: EdfaPaymentGateway.EdfaPgResult
  public let status: EdfaPaymentGateway.EdfaPgStatus
  public let orderId: Swift.String
  public let transactionId: Swift.String
  public let declineReason: Swift.String
}
extension EdfaPaymentGateway.EdfaPgSaleDecline : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct EdfaPgSaleRedirectParams {
  public let paymentRequisites: Swift.String
  public let md: Swift.String?
  public let termUrl: Swift.String
}
extension EdfaPaymentGateway.EdfaPgSaleRedirectParams : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol TextInputFormatter {
  func formatInput(currentText: Swift.String, range: Foundation.NSRange, replacementString text: Swift.String) -> EdfaPaymentGateway.FormattedTextValue
}
final public class VirtualPurchaseSession {
  final public var operation: Swift.String
  final public var method: Swift.String
  final public var merchant_key: Swift.String
  final public var success_url: Swift.String
  final public var cancel_url: Swift.String
  final public var hash: Swift.String
  final public var order: EdfaPaymentGateway.EdfaPgSaleOrder
  final public var customer: EdfaPaymentGateway.EdfaPgPayer
  public init(hash: Swift.String, method: Swift.String, merchant_key: Swift.String, success_url: Swift.String, cancel_url: Swift.String, order: EdfaPaymentGateway.EdfaPgSaleOrder, customer: EdfaPaymentGateway.EdfaPgPayer)
  @objc deinit
}
public typealias EdfaPgCreditvoidCallback = EdfaPaymentGateway.EdfaPgCallback<EdfaPaymentGateway.EdfaPgCreditvoidResult>
public enum EdfaPgCreditvoidResult : Swift.Decodable {
  case success(EdfaPaymentGateway.EdfaPgCreditvoidSuccess)
  public var result: any EdfaPaymentGateway.EdfaPgResultProtocol {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct EdfaPg3dsResponse {
  public let orderId: Swift.String?
  public let transactionId: Swift.String?
  public let ciphertext: Swift.String?
  public let nonce: Swift.String?
  public let tag: Swift.String?
  public let result: EdfaPaymentGateway.Result?
  public let gatewayRecommendation: EdfaPaymentGateway.GatewayRecommendation?
}
extension EdfaPaymentGateway.EdfaPg3dsResponse : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum Result : Swift.String, Swift.Codable {
  case success
  case failure
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum GatewayRecommendation : Swift.String, Swift.Codable {
  case proceed
  case dontProceed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct EdfaPgCaptureSuccess : EdfaPaymentGateway.DetailsEdfaPgResultProtocol {
  public let transactionDate: Foundation.Date
  public let descriptor: Swift.String?
  public let orderAmount: Swift.Double
  public let orderCurrency: Swift.String
  public let action: EdfaPaymentGateway.EdfaPgAction
  public let result: EdfaPaymentGateway.EdfaPgResult
  public let status: EdfaPaymentGateway.EdfaPgStatus
  public let orderId: Swift.String
  public let transactionId: Swift.String
}
extension EdfaPaymentGateway.EdfaPgCaptureSuccess : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum EdfaPgTransactionStatus : Swift.String, Swift.Codable {
  case fail
  case success
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class TextFieldInputController : ObjectiveC.NSObject, UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) open var formatter: (any EdfaPaymentGateway.TextInputFormatter)?
  @_Concurrency.MainActor(unsafe) @objc open func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @objc deinit
}
public var ENABLE_DEBUG: Swift.Bool
@_hasMissingDesignatedInitializers final public class EdfaPgSdk {
  public static func config(_ credendials: EdfaPaymentGateway.EdfaPgCredential)
  public static func enableLogs()
  @objc deinit
}
public class CreditCardValidator {
  public var types: [EdfaPaymentGateway.CreditCardValidationType] {
    get
    set
  }
  public init()
  public func type(from string: Swift.String) -> EdfaPaymentGateway.CreditCardValidationType?
  public func validate(string: Swift.String) -> Swift.Bool
  public func validate(string: Swift.String, forType type: EdfaPaymentGateway.CreditCardValidationType) -> Swift.Bool
  public func onlyNumbers(string: Swift.String) -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AKMaskField : UIKit.UITextField {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var maskExpression: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open func setMask(_ mask: Swift.String, withMaskTemplate maskTemplate: Swift.String!)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open func refreshMask()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var placeholder: Swift.String? {
    @objc get
    @objc set
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension EdfaPaymentGateway.AKMaskField : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
public struct EdfaPgGetTransactionStatusService {
}
extension EdfaPaymentGateway.EdfaPgGetTransactionStatusService : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct AKMaskFieldBlockCharacter {
}
public struct EdfaPgTestCard {
  public static var saleSuccess: EdfaPaymentGateway.EdfaPgCard {
    get
  }
  public static var saleFailure: EdfaPaymentGateway.EdfaPgCard {
    get
  }
  public static var captureFailure: EdfaPaymentGateway.EdfaPgCard {
    get
  }
  public static var secure3dSuccess: EdfaPaymentGateway.EdfaPgCard {
    get
  }
  public static var secure3dFailure: EdfaPaymentGateway.EdfaPgCard {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class EdfaPgSaleAdapter : EdfaPaymentGateway.EdfaPgBaseAdapter<EdfaPaymentGateway.EdfaPgSaleService> {
  @discardableResult
  final public func execute(order: EdfaPaymentGateway.EdfaPgSaleOrder, card: EdfaPaymentGateway.EdfaPgCard, payer: EdfaPaymentGateway.EdfaPgPayer, termUrl3ds: Swift.String, options: EdfaPaymentGateway.EdfaPgSaleOptions? = nil, auth: Swift.Bool, callback: @escaping EdfaPaymentGateway.EdfaPgSaleCallback) -> Foundation.URLSessionDataTask
  @objc deinit
}
public enum EdfaPgTransactionType : Swift.String, Swift.Codable {
  case secure3d
  case threeDs
  case sale
  case auth
  case capture
  case reversal
  case refund
  case redirect
  case chargeback
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
open class DefaultTextFormatter : EdfaPaymentGateway.TextFormatter, EdfaPaymentGateway.TextUnformatter {
  final public let textPattern: Swift.String
  final public let patternSymbol: Swift.Character
  public init(textPattern: Swift.String, patternSymbol: Swift.Character = Constants.defaultPatternSymbol)
  open func format(_ unformattedText: Swift.String?) -> Swift.String?
  open func unformat(_ formatted: Swift.String?) -> Swift.String?
  public struct Constants {
    public static let defaultPatternSymbol: Swift.Character
  }
  @objc deinit
}
public struct EdfaPgError : Swift.Error {
  public let result: EdfaPaymentGateway.EdfaPgResult
  public let code: Swift.Int
  public let message: Swift.String
  public let exactErrors: [EdfaPaymentGateway.EdfaPgExactError]
  public var localizedDescription: Swift.String {
    get
  }
}
extension EdfaPaymentGateway.EdfaPgError : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
open class PlaceholderTextFormatter : EdfaPaymentGateway.TextFormatter, EdfaPaymentGateway.TextUnformatter {
  final public let textPattern: Swift.String
  final public let patternSymbol: Swift.Character
  public init(textPattern: Swift.String, patternSymbol: Swift.Character = "#")
  open func format(_ unformattedText: Swift.String?) -> Swift.String?
  open func unformat(_ formattedText: Swift.String?) -> Swift.String?
  @objc deinit
}
public class EdfaPgOrder : EdfaPaymentGateway.EdfaPgOrderProtocol {
  public var id: Swift.String
  public var amount: Swift.Double
  public var description: Swift.String
  public init(id: Swift.String, amount: Swift.Double, description: Swift.String)
  @objc deinit
}
public protocol TextNumberFormatter {
  func format(_ number: Foundation.NSNumber) -> Swift.String?
}
public struct FormattedTextValue : Swift.Equatable {
  public let formattedText: Swift.String
  public let caretBeginOffset: Swift.Int
  public init(formattedText: Swift.String, caretBeginOffset: Swift.Int)
  public static var zero: EdfaPaymentGateway.FormattedTextValue {
    get
  }
  public static func == (a: EdfaPaymentGateway.FormattedTextValue, b: EdfaPaymentGateway.FormattedTextValue) -> Swift.Bool
}
public enum Brands : Swift.String {
  case NONE, Mada, Visa, UnionPay, MasterCard, Amex, JCB, DEFAULT, Discover
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class CreditCardFormView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var cardGradientColors: [Swift.String : [UIKit.UIColor]]
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var defaultCardColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var cardHolderExpireDateTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var cardHolderExpireDateColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var backLineColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var chipImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var cvcAmexImageName: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var cardHolderString: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var cardHolderPlaceholderString: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var expireDatePlaceholderText: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var cardNumberMaskExpression: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var cardNumberMaskTemplate: Swift.String {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var cardNumberFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var cardPlaceholdersFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var cardTextFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func isAmex() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func paymentCardTextFieldDidChange(cardNumber: Swift.String? = "", expirationYear: Swift.UInt?, expirationMonth: Swift.UInt?, cvc: Swift.String? = "")
  @_Concurrency.MainActor(unsafe) public func paymentCardTextFieldDidEndEditingExpiration(expirationYear: Swift.UInt)
  @_Concurrency.MainActor(unsafe) public func paymentCardTextFieldDidBeginEditingCVC()
  @_Concurrency.MainActor(unsafe) public func paymentCardTextFieldDidEndEditingCVC()
  @objc deinit
}
public enum EdfaPgAction : Swift.String, Swift.Codable {
  case sale
  case capture
  case creditvoid
  case getTransStatus
  case getTransDetails
  case recurringSale
  case chargeback
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
final public class EdfaPgAdapterFactory {
  public init()
  final public func createSale() -> EdfaPaymentGateway.EdfaPgSaleAdapter
  final public func createRecurringSale() -> EdfaPaymentGateway.EdfaPgRecurringSaleAdapter
  final public func createCapture() -> EdfaPaymentGateway.EdfaPgCaptureAdapter
  final public func createCreditvoid() -> EdfaPaymentGateway.EdfaPgCreditvoidAdapter
  final public func createGetTransactionStatus() -> EdfaPaymentGateway.EdfaPgGetTransactionStatusAdapter
  final public func createGetTransactionDetails() -> EdfaPaymentGateway.EdfaPgGetTransactionDetailsAdapter
  @objc deinit
}
open class SumTextFormatter : EdfaPaymentGateway.TextFormatter, EdfaPaymentGateway.TextUnformatter, EdfaPaymentGateway.TextNumberFormatter, EdfaPaymentGateway.TextNumberUnformatter {
  final public let numberFormatter: Foundation.NumberFormatter
  open var maximumIntegerCharacters: Swift.Int {
    get
    set
  }
  open var maximumDecimalCharacters: Swift.Int {
    get
  }
  open var prefix: Swift.String? {
    get
  }
  open var suffix: Swift.String? {
    get
  }
  open var groupingSeparator: Swift.String {
    get
  }
  open var decimalSeparator: Swift.String {
    get
  }
  open var groupingSize: Swift.Int {
    get
  }
  public init(numberFormatter: Foundation.NumberFormatter)
  convenience public init(textPattern: Swift.String, patternSymbol: Swift.Character = "#")
  open func format(_ unformatted: Swift.String?) -> Swift.String?
  open func format(_ number: Foundation.NSNumber) -> Swift.String?
  open func unformat(_ formatted: Swift.String?) -> Swift.String?
  open func unformatNumber(_ formattedText: Swift.String?) -> Foundation.NSNumber?
  @objc deinit
}
public enum PublicIPAPIURLs {
  public enum Hybrid : Swift.String, Swift.CaseIterable {
    case icanhazip
    case ipv6test
    case seeip
    case whatismyipaddress
    case ident
    public init?(rawValue: Swift.String)
    public typealias AllCases = [EdfaPaymentGateway.PublicIPAPIURLs.Hybrid]
    public typealias RawValue = Swift.String
    public static var allCases: [EdfaPaymentGateway.PublicIPAPIURLs.Hybrid] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum IPv4 : Swift.String, Swift.CaseIterable {
    case icanhazip
    case ipv6test
    case seeip
    case whatismyipaddress
    case ident
    case ipify
    case amazonaws
    case ipecho
    public init?(rawValue: Swift.String)
    public typealias AllCases = [EdfaPaymentGateway.PublicIPAPIURLs.IPv4]
    public typealias RawValue = Swift.String
    public static var allCases: [EdfaPaymentGateway.PublicIPAPIURLs.IPv4] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum IPv6 : Swift.String, Swift.CaseIterable {
    case icanhazip
    case ipv6test
    case seeip
    case whatismyipaddress
    case ident
    case ipify
    public init?(rawValue: Swift.String)
    public typealias AllCases = [EdfaPaymentGateway.PublicIPAPIURLs.IPv6]
    public typealias RawValue = Swift.String
    public static var allCases: [EdfaPaymentGateway.PublicIPAPIURLs.IPv6] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
open class DefaultTextInputFormatter : EdfaPaymentGateway.TextInputFormatter, EdfaPaymentGateway.TextFormatter, EdfaPaymentGateway.TextUnformatter {
  public init(textPattern: Swift.String, patternSymbol: Swift.Character = "#")
  open func formatInput(currentText: Swift.String, range: Foundation.NSRange, replacementString text: Swift.String) -> EdfaPaymentGateway.FormattedTextValue
  open func format(_ unformattedText: Swift.String?) -> Swift.String?
  open func unformat(_ formatted: Swift.String?) -> Swift.String?
  @objc deinit
}
public protocol DetailsEdfaPgResultProtocol : EdfaPaymentGateway.OrderEdfaPgResultProtocol {
  var transactionDate: Foundation.Date { get }
  var descriptor: Swift.String? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class EdfaPgCaptureAdapter : EdfaPaymentGateway.EdfaPgBaseAdapter<EdfaPaymentGateway.EdfaPgCaptureService> {
  @discardableResult
  final public func execute(transactionId: Swift.String, payerEmail: Swift.String, cardNumber: Swift.String, amount: Swift.Double?, callback: @escaping EdfaPaymentGateway.EdfaPgCaptureCallback) -> Foundation.URLSessionDataTask
  @discardableResult
  final public func execute(transactionId: Swift.String, hash: Swift.String, amount: Swift.Double?, callback: @escaping EdfaPaymentGateway.EdfaPgCaptureCallback) -> Foundation.URLSessionDataTask
  @objc deinit
}
public struct EdfaPgCreditvoidSuccess : EdfaPaymentGateway.EdfaPgResultProtocol {
  public let action: EdfaPaymentGateway.EdfaPgAction
  public let result: EdfaPaymentGateway.EdfaPgResult
  public let status: EdfaPaymentGateway.EdfaPgStatus
  public let orderId: Swift.String
  public let transactionId: Swift.String
}
extension EdfaPaymentGateway.EdfaPgCreditvoidSuccess : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public typealias EdfaPgGetTransactionDetailsCallback = EdfaPaymentGateway.EdfaPgCallback<EdfaPaymentGateway.EdfaPgGetTransactionDetailsResult>
public enum EdfaPgGetTransactionDetailsResult : Swift.Decodable {
  case success(EdfaPaymentGateway.EdfaPgGetTransactionDetailsSuccess)
  public var result: any EdfaPaymentGateway.OrderEdfaPgResultProtocol {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct EdfaPgSaleRecurring : EdfaPaymentGateway.DetailsEdfaPgResultProtocol {
  public let action: EdfaPaymentGateway.EdfaPgAction
  public let result: EdfaPaymentGateway.EdfaPgResult
  public let status: EdfaPaymentGateway.EdfaPgStatus
  public let orderId: Swift.String
  public let transactionId: Swift.String
  public let transactionDate: Foundation.Date
  public let descriptor: Swift.String?
  public let recurringToken: Swift.String
  public let orderAmount: Swift.Double
  public let orderCurrency: Swift.String
}
extension EdfaPaymentGateway.EdfaPgSaleRecurring : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
open class PlaceholderTextInputFormatter : EdfaPaymentGateway.TextInputFormatter, EdfaPaymentGateway.TextFormatter, EdfaPaymentGateway.TextUnformatter, EdfaPaymentGateway.CaretPositioner {
  public init(textPattern: Swift.String, patternSymbol: Swift.Character = "#")
  open func formatInput(currentText: Swift.String, range: Foundation.NSRange, replacementString text: Swift.String) -> EdfaPaymentGateway.FormattedTextValue
  open func getCaretOffset(for text: Swift.String) -> Swift.Int
  open func format(_ unformattedText: Swift.String?) -> Swift.String?
  open func unformat(_ formattedText: Swift.String?) -> Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class EdfaPgCreditvoidAdapter : EdfaPaymentGateway.EdfaPgBaseAdapter<EdfaPaymentGateway.EdfaPgCreditvoidService> {
  @discardableResult
  final public func execute(transactionId: Swift.String, payerEmail: Swift.String, cardNumber: Swift.String, amount: Swift.Double?, callback: @escaping EdfaPaymentGateway.EdfaPgCreditvoidCallback) -> Foundation.URLSessionDataTask
  @discardableResult
  final public func execute(transactionId: Swift.String, hash: Swift.String, amount: Swift.Double?, callback: @escaping EdfaPaymentGateway.EdfaPgCreditvoidCallback) -> Foundation.URLSessionDataTask
  @objc deinit
}
public struct EdfaPgGetTransactionStatusSuccess : EdfaPaymentGateway.EdfaPgResultProtocol {
  public let action: EdfaPaymentGateway.EdfaPgAction
  public let result: EdfaPaymentGateway.EdfaPgResult
  public let status: EdfaPaymentGateway.EdfaPgStatus
  public let orderId: Swift.String
  public let transactionId: Swift.String
}
extension EdfaPaymentGateway.EdfaPgGetTransactionStatusSuccess : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
open class SumTextInputFormatter : EdfaPaymentGateway.TextInputFormatter, EdfaPaymentGateway.TextFormatter, EdfaPaymentGateway.TextUnformatter, EdfaPaymentGateway.TextNumberFormatter, EdfaPaymentGateway.TextNumberUnformatter, EdfaPaymentGateway.CaretPositioner {
  open var maximumIntegerCharacters: Swift.Int {
    get
    set
  }
  open var maximumDecimalCharacters: Swift.Int {
    get
  }
  open var prefix: Swift.String? {
    get
  }
  open var suffix: Swift.String? {
    get
  }
  open var groupingSeparator: Swift.String {
    get
  }
  open var decimalSeparator: Swift.String {
    get
  }
  open var groupingSize: Swift.Int {
    get
  }
  open var numberFormatter: Foundation.NumberFormatter {
    get
  }
  public init(numberFormatter: Foundation.NumberFormatter)
  public init(textPattern: Swift.String, patternSymbol: Swift.Character = "#")
  open func formatInput(currentText: Swift.String, range: Foundation.NSRange, replacementString text: Swift.String) -> EdfaPaymentGateway.FormattedTextValue
  open func format(_ unformatted: Swift.String?) -> Swift.String?
  open func format(_ number: Foundation.NSNumber) -> Swift.String?
  open func unformat(_ formattedText: Swift.String?) -> Swift.String?
  open func unformatNumber(_ formattedText: Swift.String?) -> Foundation.NSNumber?
  open func getCaretOffset(for text: Swift.String) -> Swift.Int
  @objc deinit
}
public protocol EdfaPgResultProtocol {
  var action: EdfaPaymentGateway.EdfaPgAction { get }
  var result: EdfaPaymentGateway.EdfaPgResult { get }
  var status: EdfaPaymentGateway.EdfaPgStatus { get }
  var orderId: Swift.String { get }
  var transactionId: Swift.String { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class EdfaPgRecurringSaleAdapter : EdfaPaymentGateway.EdfaPgBaseAdapter<EdfaPaymentGateway.EdfaPgRecurringSaleService> {
  @discardableResult
  final public func execute(order: any EdfaPaymentGateway.EdfaPgOrderProtocol, options: EdfaPaymentGateway.EdfaPgRecurringOptions, payerEmail: Swift.String, cardNumber: Swift.String, auth: Swift.Bool, callback: @escaping EdfaPaymentGateway.EdfaPgSaleCallback) -> Foundation.URLSessionDataTask
  @discardableResult
  final public func execute(order: any EdfaPaymentGateway.EdfaPgOrderProtocol, options: EdfaPaymentGateway.EdfaPgRecurringOptions, hash: Swift.String, auth: Swift.Bool, callback: @escaping EdfaPaymentGateway.EdfaPgSaleCallback) -> Foundation.URLSessionDataTask
  @objc deinit
}
public struct EdfaPgSale3ds : EdfaPaymentGateway.DetailsEdfaPgResultProtocol {
  public let action: EdfaPaymentGateway.EdfaPgAction
  public let result: EdfaPaymentGateway.EdfaPgResult
  public let status: EdfaPaymentGateway.EdfaPgStatus
  public let orderId: Swift.String
  public let transactionId: Swift.String
  public let transactionDate: Foundation.Date
  public let descriptor: Swift.String?
  public let orderAmount: Swift.Double
  public let orderCurrency: Swift.String
  public let redirectUrl: Swift.String
  public let redirectParams: EdfaPaymentGateway.EdfaPgSaleRedirectParams
  public let redirectMethod: EdfaPaymentGateway.EdfaPgRedirectMethod
}
extension EdfaPaymentGateway.EdfaPgSale3ds : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public func == (lhs: EdfaPaymentGateway.CreditCardValidationType, rhs: EdfaPaymentGateway.CreditCardValidationType) -> Swift.Bool
public struct CreditCardValidationType : Swift.Equatable {
  public var name: Swift.String
  public var regex: Swift.String
  public init(dict: [Swift.String : Any])
}
public struct EdfaPgSaleRedirect : EdfaPaymentGateway.DetailsEdfaPgResultProtocol {
  public let action: EdfaPaymentGateway.EdfaPgAction
  public let result: EdfaPaymentGateway.EdfaPgResult
  public let status: EdfaPaymentGateway.EdfaPgStatus
  public let orderId: Swift.String
  public let transactionId: Swift.String
  public let transactionDate: Foundation.Date
  public let descriptor: Swift.String?
  public let orderAmount: Swift.Double
  public let orderCurrency: Swift.String
  public let redirectUrl: Swift.String
  public let redirectParams: EdfaPaymentGateway.EdfaPgSaleRedirectBody
  public let redirectMethod: EdfaPaymentGateway.EdfaPgRedirectMethod
  public func validation() -> Swift.Bool
}
extension EdfaPaymentGateway.EdfaPgSaleRedirect : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct Test {
  public let orderId: Swift.String
  public let transactionId: Swift.String
  public let transactionDate: Foundation.Date
}
public protocol TextNumberUnformatter {
  func unformatNumber(_ formattedText: Swift.String?) -> Foundation.NSNumber?
}
public struct AKMaskFieldBlock {
}
final public class EdfaPgPayerOptions {
  final public var middleName: Swift.String?
  final public var birthdate: Foundation.Date?
  final public var address2: Swift.String?
  final public var state: Swift.String?
  public init(middleName: Swift.String? = nil, birthdate: Foundation.Date? = nil, address2: Swift.String? = nil, state: Swift.String? = nil)
  @objc deinit
}
public struct EdfaPgCreditvoidService {
}
extension EdfaPaymentGateway.EdfaPgCreditvoidService : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class TestSDK {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TextViewInputController : ObjectiveC.NSObject, UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) open var formatter: (any EdfaPaymentGateway.TextInputFormatter)?
  @_Concurrency.MainActor(unsafe) @objc open func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
final public class EdfaPgRecurringOptions {
  final public var firstTransactionId: Swift.String
  final public var token: Swift.String
  public init(firstTransactionId: Swift.String, token: Swift.String)
  @objc deinit
}
public protocol CaretPositioner {
  func getCaretOffset(for text: Swift.String) -> Swift.Int
}
public typealias EdfaPgCaptureCallback = EdfaPaymentGateway.EdfaPgCallback<EdfaPaymentGateway.EdfaPgCaptureResult>
public enum EdfaPgCaptureResult : Swift.Decodable {
  case success(EdfaPaymentGateway.EdfaPgCaptureSuccess)
  case decline(EdfaPaymentGateway.EdfaPgSaleDecline)
  public var result: any EdfaPaymentGateway.DetailsEdfaPgResultProtocol {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum EdfaPgRedirectMethod : Swift.String, Swift.Codable {
  case get
  case post
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol EdfaPgOrderProtocol {
  var id: Swift.String { get set }
  var amount: Swift.Double { get set }
  var description: Swift.String { get set }
}
public enum EdfaPgResult : Swift.String, Swift.Codable {
  case success
  case declined
  case rejected
  case accepted
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SaleRedirectionView : WebKit.WKWebView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func setup(response: EdfaPaymentGateway.EdfaPgSaleRedirect, onTransactionSuccess: ((EdfaPaymentGateway.EdfaPg3dsResponse) -> Swift.Void)?, onTransactionFailure: ((EdfaPaymentGateway.EdfaPg3dsResponse) -> Swift.Void)?) -> EdfaPaymentGateway.SaleRedirectionView
  @_Concurrency.MainActor(unsafe) public func show(owner: UIKit.UIViewController, onStartIn: @escaping ((UIKit.UIViewController) -> Swift.Void), onError: @escaping ((Swift.String) -> Swift.Void))
  @_Concurrency.MainActor(unsafe) public func enableLogs() -> EdfaPaymentGateway.SaleRedirectionView
  @_Concurrency.MainActor(unsafe) public func disableLogs() -> EdfaPaymentGateway.SaleRedirectionView
  @objc deinit
}
extension EdfaPaymentGateway.SaleRedirectionView : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
}
extension EdfaPaymentGateway.SaleRedirectionView : WebKit.WKUIDelegate {
}
public struct EdfaPgCaptureService {
}
extension EdfaPaymentGateway.EdfaPgCaptureService : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct EdfaPgGetTransactionDetailsSuccess : EdfaPaymentGateway.OrderEdfaPgResultProtocol {
  public let action: EdfaPaymentGateway.EdfaPgAction
  public var result: EdfaPaymentGateway.EdfaPgResult
  public var status: EdfaPaymentGateway.EdfaPgStatus
  public let orderId: Swift.String
  public let transactionId: Swift.String
  public let declineReason: Swift.String?
  public let name: Swift.String
  public let mail: Swift.String
  public let ip: Swift.String
  public let orderAmount: Swift.Double
  public let orderCurrency: Swift.String
  public let card: Swift.String
  public let transactions: [EdfaPaymentGateway.EdfaPgTransaction]
}
extension EdfaPaymentGateway.EdfaPgGetTransactionDetailsSuccess : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct EdfaPgSaleService {
}
extension EdfaPaymentGateway.EdfaPgSaleService : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public typealias EdfaPgCallback<Result> = (EdfaPaymentGateway.EdfaPgResponse<Result>) -> Swift.Void where Result : Swift.Decodable
public enum EdfaPgResponse<Result> where Result : Swift.Decodable {
  case result(Result)
  case error(EdfaPaymentGateway.EdfaPgError)
  case failure(any Swift.Error)
}
public protocol EdfaPgAdapterDelegate : AnyObject {
  func willSendRequest(_ request: EdfaPaymentGateway.EdfaPgDataRequest)
  func didReceiveResponse(_ reponse: EdfaPaymentGateway.EdfaPgDataResponse?)
}
@_hasMissingDesignatedInitializers public class EdfaPgBaseAdapter<Serivce> where Serivce : Swift.Encodable {
  weak public var delegate: (any EdfaPaymentGateway.EdfaPgAdapterDelegate)?
  @objc deinit
}
public struct EdfaPgGetTransactionDetailsService {
}
extension EdfaPaymentGateway.EdfaPgGetTransactionDetailsService : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class EdfaPgShippingAddress {
  @objc deinit
}
public class ExpressApplePay {
  public init()
  @objc deinit
}
extension EdfaPaymentGateway.ExpressApplePay {
  public func initialize(target: UIKit.UIViewController, onError: @escaping ((Any) -> Swift.Void), onPresent: (() -> Swift.Void)?)
  public func on(authentication: @escaping ((PassKit.PKPayment) -> Swift.Void)) -> EdfaPaymentGateway.ExpressApplePay
  public func on(transactionSuccess: @escaping (([Swift.String : Any]?) -> Swift.Void)) -> EdfaPaymentGateway.ExpressApplePay
  public func on(transactionFailure: @escaping (([Swift.String : Any]) -> Swift.Void)) -> EdfaPaymentGateway.ExpressApplePay
  public func set(applePayMerchantID: Swift.String) -> EdfaPaymentGateway.ExpressApplePay
  public func set(payer: EdfaPaymentGateway.EdfaPgPayer) -> EdfaPaymentGateway.ExpressApplePay
  public func set(order: EdfaPaymentGateway.EdfaPgSaleOrder) -> EdfaPaymentGateway.ExpressApplePay
  public func set(shippingAddress: EdfaPaymentGateway.EdfaPgShippingAddress) -> EdfaPaymentGateway.ExpressApplePay
  public func set(merchantCapability: PassKit.PKMerchantCapability) -> EdfaPaymentGateway.ExpressApplePay
  public func addSupported(paymentNetworks: [PassKit.PKPaymentNetwork]) -> EdfaPaymentGateway.ExpressApplePay
  public func addPurchaseItem(label: Swift.String, amount: Swift.Double, type: PassKit.PKPaymentSummaryItemType) -> EdfaPaymentGateway.ExpressApplePay
  public func enable(logs: Swift.Bool) -> EdfaPaymentGateway.ExpressApplePay
}
final public class EdfaPgSaleOrder : EdfaPaymentGateway.EdfaPgOrder {
  final public var currency: Swift.String
  final public var country: Swift.String
  public init(id: Swift.String, amount: Swift.Double, currency: Swift.String, description: Swift.String)
  public init(id: Swift.String, amount: Swift.Double, currency: Swift.String, country: Swift.String, description: Swift.String)
  @objc deinit
}
final public class EdfaPgPayer {
  final public var firstName: Swift.String
  final public var lastName: Swift.String
  final public var address: Swift.String
  final public var country: Swift.String
  final public var city: Swift.String
  final public var zip: Swift.String
  final public var email: Swift.String
  final public var phone: Swift.String
  final public var ip: Swift.String
  final public var options: EdfaPaymentGateway.EdfaPgPayerOptions?
  public init(firstName: Swift.String, lastName: Swift.String, address: Swift.String, country: Swift.String, city: Swift.String, zip: Swift.String, email: Swift.String, phone: Swift.String, ip: Swift.String, options: EdfaPaymentGateway.EdfaPgPayerOptions? = nil)
  public init(firstName: Swift.String, lastName: Swift.String, email: Swift.String, phone: Swift.String, options: EdfaPaymentGateway.EdfaPgPayerOptions? = nil)
  @objc deinit
}
final public class EdfaPgCard {
  final public var number: Swift.String
  final public var expireMonth: Swift.Int
  final public var expireYear: Swift.Int
  final public var cvv: Swift.String
  public init(number: Swift.String, expireMonth: Swift.Int, expireYear: Swift.Int, cvv: Swift.String)
  @objc deinit
}
extension EdfaPaymentGateway.EdfaPgStatus : Swift.Equatable {}
extension EdfaPaymentGateway.EdfaPgStatus : Swift.Hashable {}
extension EdfaPaymentGateway.EdfaPgStatus : Swift.RawRepresentable {}
extension EdfaPaymentGateway.Result : Swift.Equatable {}
extension EdfaPaymentGateway.Result : Swift.Hashable {}
extension EdfaPaymentGateway.Result : Swift.RawRepresentable {}
extension EdfaPaymentGateway.GatewayRecommendation : Swift.Equatable {}
extension EdfaPaymentGateway.GatewayRecommendation : Swift.Hashable {}
extension EdfaPaymentGateway.GatewayRecommendation : Swift.RawRepresentable {}
extension EdfaPaymentGateway.EdfaPgTransactionStatus : Swift.Equatable {}
extension EdfaPaymentGateway.EdfaPgTransactionStatus : Swift.Hashable {}
extension EdfaPaymentGateway.EdfaPgTransactionStatus : Swift.RawRepresentable {}
extension EdfaPaymentGateway.EdfaPgTransactionType : Swift.Equatable {}
extension EdfaPaymentGateway.EdfaPgTransactionType : Swift.Hashable {}
extension EdfaPaymentGateway.EdfaPgTransactionType : Swift.RawRepresentable {}
extension EdfaPaymentGateway.Brands : Swift.Equatable {}
extension EdfaPaymentGateway.Brands : Swift.Hashable {}
extension EdfaPaymentGateway.Brands : Swift.RawRepresentable {}
extension EdfaPaymentGateway.EdfaPgAction : Swift.Equatable {}
extension EdfaPaymentGateway.EdfaPgAction : Swift.Hashable {}
extension EdfaPaymentGateway.EdfaPgAction : Swift.RawRepresentable {}
extension EdfaPaymentGateway.PublicIPAPIURLs.Hybrid : Swift.Equatable {}
extension EdfaPaymentGateway.PublicIPAPIURLs.Hybrid : Swift.Hashable {}
extension EdfaPaymentGateway.PublicIPAPIURLs.Hybrid : Swift.RawRepresentable {}
extension EdfaPaymentGateway.PublicIPAPIURLs.IPv4 : Swift.Equatable {}
extension EdfaPaymentGateway.PublicIPAPIURLs.IPv4 : Swift.Hashable {}
extension EdfaPaymentGateway.PublicIPAPIURLs.IPv4 : Swift.RawRepresentable {}
extension EdfaPaymentGateway.PublicIPAPIURLs.IPv6 : Swift.Equatable {}
extension EdfaPaymentGateway.PublicIPAPIURLs.IPv6 : Swift.Hashable {}
extension EdfaPaymentGateway.PublicIPAPIURLs.IPv6 : Swift.RawRepresentable {}
extension EdfaPaymentGateway.EdfaPgRedirectMethod : Swift.Equatable {}
extension EdfaPaymentGateway.EdfaPgRedirectMethod : Swift.Hashable {}
extension EdfaPaymentGateway.EdfaPgRedirectMethod : Swift.RawRepresentable {}
extension EdfaPaymentGateway.EdfaPgResult : Swift.Equatable {}
extension EdfaPaymentGateway.EdfaPgResult : Swift.Hashable {}
extension EdfaPaymentGateway.EdfaPgResult : Swift.RawRepresentable {}
